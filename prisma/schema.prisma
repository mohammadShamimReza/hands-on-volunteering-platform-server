// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(uuid())
  fullName     String
  email        String   @unique
  password     String
  bio          String?
  skills       skills[] @default([])
  causes       causes[] @default([])
  role         Role     @default(USER)
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  eventsCreated Event[]
  eventsJoined  UserEvent[]
  teams         TeamMember[]
  contributions Contribution[]
  post          Post[]

  comments Comment[]
  teamsCreated  Team[]
  leaderboard   Leaderboard[]
  certificates  Certificate[]
}

enum Role {
  USER
  ADMIN
  ORG
}

enum skills {
  Academic
  Art
  Business
  Communication
  Computer
  Cooking
  Craft
  Creative
  Design
  Engineering
  Finance
  Health
  Language
  Leadership
  Legal
  Management
  Marketing
  Music
  Photography
  Programming
  Science
  Social
}

enum causes {
  Animal
  Arts
  Children
  Community
  Crisis
  Culture
  Disability
  Disaster
  Education
  Employment
  Elderly
  Environment
  Health
  Human
  Humanitarian
  International
  Poverty
  Rights
  Social
  Sports
  Technology
}

model Event {
  id              String     @id @default(uuid())
  title           String
  description     String?
  date            DateTime
  time            String?
  location        String?
  category        causes
  endDateTime     DateTime
  requiredMembers Int
  createdById     String?
  createdByTeamId String?

  visibility      Visibility @default(PUBLIC)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  // Relationships
  createdBy       User?       @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdByTeam   Team?      @relation(fields: [createdByTeamId], references: [id], onDelete: SetNull)

  participants  UserEvent[]
  contributions Contribution[]
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model UserEvent {
  id        String      @id @default(uuid())
  userId    String
  eventId   String
  status    EventStatus @default(JOINED)
  joinedAt  DateTime    @default(now())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId]) // Ensures a user cannot join the same event multiple times
}

enum EventStatus {
  JOINED
  COMPLETED
  CANCELLED
}

model Post {
  id              String     @id @default(uuid())
  title           String
  description     String?
  urgency         Urgency    @default(MEDIUM)
  status          HelpStatus @default(OPEN)
  createdById     String?
  createdByTeamId String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  createdBy     User? @relation(fields: [createdById], references: [id])
  createdByTeam Team? @relation(fields: [createdByTeamId], references: [id])

  comments Comment[]
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum HelpStatus {
  OPEN
  CLOSED
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        TeamType @default(PUBLIC)
  createdById String
    events       Event[]

  post        Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User         @relation(fields: [createdById], references: [id])
  members   TeamMember[]
}

enum TeamType {
  PUBLIC
  PRIVATE
}

model TeamMember {
  id       String   @id @default(uuid())
  userId   String
  teamId   String
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId]) // Ensures a user cannot join the same team multiple times
}

model Contribution {
  id        String   @id @default(uuid())
  userId    String
  eventId   String?
  hours     Int?     @default(0)
  points    Int?     @default(0)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  event Event? @relation(fields: [eventId], references: [id])

  validations Verification[]
}

model Verification {
  id             String             @id @default(uuid())
  contributionId String
  verifierId     String
  status         VerificationStatus @default(PENDING)
  createdAt      DateTime           @default(now())

  contribution Contribution @relation(fields: [contributionId], references: [id])
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Leaderboard {
  id        String   @id @default(uuid())
  userId    String
  rank      Int
  points    Int
  hours     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Certificate {
  id       String           @id @default(uuid())
  userId   String
  level    CertificateLevel
  issuedAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum CertificateLevel {
  BRONZE
  SILVER
  GOLD
}















// // Prisma Schema for HandsOn Platform
// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql" // or "mysql"
//   url      = env("DATABASE_URL")
// }

// enum Role {
//   USER
//   ADMIN
//   ORG
// }

// enum Visibility {
//   PUBLIC
//   PRIVATE
// }

// enum Urgency {
//   LOW
//   MEDIUM
//   HIGH
//   URGENT
// }

// enum EventStatus {
//   JOINED
//   COMPLETED
//   CANCELLED
// }

// enum CertificateLevel {
//   BRONZE
//   SILVER
//   GOLD
// }

// // ✅ Users (Can create events, posts & join teams)
// model User {
//   id           String   @id @default(uuid())
//   fullName     String
//   email        String   @unique
//   password     String
//   bio          String?
//   skills       String[] // List of user skills
//   causes       String[] // Causes user supports
//   role         Role     @default(USER)
//   profileImage String?
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt

//   // Relationships
//   eventsCreated Event[]
//   eventsJoined  UserEvent[]
//   teams         TeamMember[]
//   contributions Contribution[]
//   posts         Post[]
//   comments      Comment[]
//   teamsCreated  Team[]
//   leaderboard   Leaderboard[]
//   certificates  Certificate[]
// }

// // ✅ Teams (Can create events & posts)
// model Team {
//   id           String     @id @default(uuid())
//   name         String
//   description  String?
//   type         Visibility @default(PUBLIC)
//   createdById  String
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @updatedAt

//   createdBy    User       @relation(fields: [createdById], references: [id])
//   members      TeamMember[]
//   events       Event[]
//   posts        Post[]
// }

// // ✅ Team Members (Links users to teams)
// model TeamMember {
//   id       String   @id @default(uuid())
//   userId   String
//   teamId   String
//   joinedAt DateTime @default(now())

//   user     User     @relation(fields: [userId], references: [id])
//   team     Team     @relation(fields: [teamId], references: [id])

//   @@unique([userId, teamId]) // Prevent duplicate memberships
// }

// // ✅ Events (Created by users or teams)
// model Event {
//   id              String     @id @default(uuid())
//   title           String
//   description     String?
//   date            DateTime
//   endDateTime     DateTime
//   time            String?
//   location        String?
//   category        String
//   requiredMembers Int
//   visibility      Visibility @default(PUBLIC)
//   createdById     String?
//   createdByTeamId String?
//   createdAt       DateTime   @default(now())
//   updatedAt       DateTime   @updatedAt

//   createdBy       User?      @relation(fields: [createdById], references: [id])
//   createdByTeam   Team?      @relation(fields: [createdByTeamId], references: [id])
//   participants    UserEvent[]
//   contributions   Contribution[]
// }

// // ✅ Users Participating in Events
// model UserEvent {
//   id        String      @id @default(uuid())
//   userId    String
//   eventId   String
//   status    EventStatus @default(JOINED)
//   joinedAt  DateTime    @default(now())

//   user      User  @relation(fields: [userId], references: [id])
//   event     Event @relation(fields: [eventId], references: [id])

//   @@unique([userId, eventId]) // Prevents duplicate event joins
// }

// // ✅ Posts (Created by users or teams)
// model Post {
//   id              String     @id @default(uuid())
//   title           String
//   description     String?
//   urgency         Urgency    @default(MEDIUM)
//   status          String     @default("OPEN") // Open or Closed
//   createdById     String?
//   createdByTeamId String?
//   createdAt       DateTime   @default(now())
//   updatedAt       DateTime   @updatedAt

//   createdBy       User?      @relation(fields: [createdById], references: [id])
//   createdByTeam   Team?      @relation(fields: [createdByTeamId], references: [id])
//   comments        Comment[]
// }

// // ✅ Comments on Posts
// model Comment {
//   id        String   @id @default(uuid())
//   userId    String
//   postId    String
//   message   String?
//   createdAt DateTime @default(now())

//   user      User @relation(fields: [userId], references: [id])
//   post      Post @relation(fields: [postId], references: [id])
// }

// // ✅ Volunteer Contributions (Tracks Hours & Points)
// model Contribution {
//   id         String   @id @default(uuid())
//   userId     String
//   eventId    String?
//   hours      Int?     @default(0)
//   points     Int?     @default(0)
//   verified   Boolean  @default(false)
//   createdAt  DateTime @default(now())

//   user       User   @relation(fields: [userId], references: [id])
//   event      Event? @relation(fields: [eventId], references: [id])
// }

// // ✅ Certificates for Volunteers
// model Certificate {
//   id         String   @id @default(uuid())
//   userId     String
//   level      CertificateLevel
//   issuedAt   DateTime @default(now())

//   user       User @relation(fields: [userId], references: [id])
// }

// // ✅ Leaderboard System
// model Leaderboard {
//   id        String   @id @default(uuid())
//   userId    String
//   rank      Int
//   points    Int
//   hours     Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user      User @relation(fields: [userId], references: [id])
// }
