// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  fullName     String
  email        String   @unique
  password     String
  bio          String?
  skills       skills[]
  causes       causes[]
  role         Role     @default(USER)
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  eventsCreated Event[]
  eventsJoined  UserEvent[]
  teams         OrganizationMember[]
  contributions Contribution[]
  helpRequests  Post[]
  helpResponses Comment[]
  teamsCreated  Organization[]
  leaderboard   Leaderboard[]
}

enum Role {
  USER
  ADMIN
  ORG
}

enum skills {
  Academic
  Art
  Business
  Communication
  Computer
  Cooking
  Craft
  Creative
  Design
  Engineering
  Finance
  Health
  Language
  Leadership
  Legal
  Management
  Marketing
  Music
  Photography
  Programming
  Science
  Social
}

enum causes {
  Animal
  Arts
  Children
  Community
  Crisis
  Culture
  Disability
  Disaster
  Education
  Employment
  Elderly
  Environment
  Health
  Human
  Humanitarian
  International
  Poverty
  Rights
  Social
  Sports
  Technology
}

model Event {
  id              String     @id @default(uuid())
  title           String
  description     String?
  date            DateTime
  time            String?
  location        String?
  category        causes
  endDateTime     DateTime
  requiredMembers Int
  createdById     String
  visibility      Visibility @default(PUBLIC)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  // Relationships
  createdBy       User       @relation(fields: [createdById], references: [id])

  participants  UserEvent[]
  contributions Contribution[]
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model UserEvent {
  id        String      @id @default(uuid())
  userId    String
  eventId   String
  status    EventStatus @default(JOINED)
  joinedAt  DateTime    @default(now())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId]) // Ensures a user cannot join the same event multiple times
}

enum EventStatus {
  JOINED
  COMPLETED
  CANCELLED
}

model Post {
  id                      String     @id @default(uuid())
  title                   String
  description             String?
  urgency                 Urgency    @default(MEDIUM)
  status                  HelpStatus @default(OPEN)
  createdById             String?
  createdByOrganizationId String?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt

  createdBy             User?         @relation(fields: [createdById], references: [id])
  createdByOrganization Organization? @relation(fields: [createdByOrganizationId], references: [id])

  responses Comment[]
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum HelpStatus {
  OPEN
  CLOSED
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  postId String
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id])
  user    User @relation(fields: [userId], references: [id])
}

model Organization {
  id           String           @id @default(uuid())
  name         String
  description  String?
  type         OrganizationType @default(PUBLIC)
  createdById  String
  helpRequests Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User                 @relation(fields: [createdById], references: [id])
  members   OrganizationMember[]
}

enum OrganizationType {
  PUBLIC
  PRIVATE
}

model OrganizationMember {
  id       String   @id @default(uuid())
  userId   String
  teamId   String
  joinedAt DateTime @default(now())

  user User         @relation(fields: [userId], references: [id])
  team Organization @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId]) // Ensures a user cannot join the same team multiple times
}

model Contribution {
  id         String   @id @default(uuid())
  userId     String
  eventId    String?
  hours      Int
  points     Int      @default(0)
  verified   Boolean  @default(false)
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  event Event? @relation(fields: [eventId], references: [id])
}

model Leaderboard {
  id        String   @id @default(uuid())
  userId    String
  rank      Int
  points    Int
  hours     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
